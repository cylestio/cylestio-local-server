"""
Event model and related functionality.

This module defines the Event model, which is the core entity for telemetry data.
"""
from datetime import datetime
from typing import Optional, Dict, Any, List, Union

from sqlalchemy import Column, Integer, String, DateTime, ForeignKey, Text
from sqlalchemy.orm import relationship, backref

from src.models.base import Base


class Event(Base):
    """
    Event model representing telemetry records generated by agents.
    
    Events are the core entity for telemetry data. All specialized event types
    like LLM interactions, tool interactions, and security alerts are linked
    to events.
    """
    __tablename__ = "events"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    agent_id = Column(String, ForeignKey("agents.agent_id"), nullable=False, index=True)
    session_id = Column(String, ForeignKey("sessions.session_id"), index=True)
    trace_id = Column(String, ForeignKey("traces.trace_id"), index=True)
    span_id = Column(String, ForeignKey("spans.span_id"), index=True)
    parent_span_id = Column(String, index=True)
    timestamp = Column(DateTime, nullable=False, index=True)
    schema_version = Column(String, nullable=False)
    name = Column(String, nullable=False, index=True)
    level = Column(String, nullable=False)
    event_type = Column(String, nullable=False, index=True)
    
    # Relationships
    agent = relationship("Agent", back_populates="events")
    session = relationship("Session", back_populates="events")
    trace = relationship("Trace", back_populates="events")
    span = relationship("Span", foreign_keys=[span_id], back_populates="events")
    
    # Specialized event relationships (one-to-one)
    llm_interaction = relationship(
        "LLMInteraction", 
        uselist=False, 
        back_populates="event",
        cascade="all, delete-orphan"
    )
    tool_interaction = relationship(
        "ToolInteraction", 
        uselist=False, 
        back_populates="event",
        cascade="all, delete-orphan"
    )
    security_alert = relationship(
        "SecurityAlert", 
        uselist=False, 
        back_populates="event",
        cascade="all, delete-orphan"
    )
    framework_event = relationship(
        "FrameworkEvent", 
        uselist=False, 
        back_populates="event",
        cascade="all, delete-orphan"
    )
    
    # Security alerts this event triggered
    triggered_alerts = relationship(
        "SecurityAlertTrigger",
        foreign_keys="SecurityAlertTrigger.triggering_event_id",
        back_populates="triggering_event",
        cascade="all, delete-orphan"
    )
    
    def __repr__(self) -> str:
        return f"<Event {self.id} ({self.name})>"
    
    @property
    def get_specialized_event(self) -> Optional[Union[
        "LLMInteraction", "ToolInteraction", "SecurityAlert", "FrameworkEvent"
    ]]:
        """
        Get the specialized event object associated with this event.
        
        Returns:
            The specialized event object, or None if this event has no specialization
        """
        if self.event_type == 'llm':
            return self.llm_interaction
        elif self.event_type == 'tool':
            return self.tool_interaction
        elif self.event_type == 'security':
            return self.security_alert
        elif self.event_type == 'framework':
            return self.framework_event
        return None
    
    @classmethod
    def from_telemetry(cls, db_session, telemetry_data: Dict[str, Any]) -> "Event":
        """
        Create an Event from telemetry data.
        
        Args:
            db_session: Database session
            telemetry_data: Telemetry data as a dictionary
            
        Returns:
            Event: The created event
        """
        from src.models.agent import Agent
        from src.models.session import Session
        from src.models.trace import Trace
        from src.models.span import Span
        
        # Get or create related entities
        agent = Agent.get_or_create(
            db_session, 
            telemetry_data.get('agent_id')
        )
        
        session = None
        session_id = telemetry_data.get('attributes', {}).get('session.id')
        if session_id:
            session = Session.get_or_create(
                db_session,
                session_id,
                agent.agent_id
            )
        
        trace = None
        trace_id = telemetry_data.get('trace_id')
        if trace_id:
            trace = Trace.get_or_create(
                db_session,
                trace_id,
                agent.agent_id
            )
        
        span = None
        span_id = telemetry_data.get('span_id')
        if span_id and trace_id:
            span = Span.get_or_create(
                db_session,
                span_id,
                trace_id,
                telemetry_data.get('parent_span_id')
            )
        
        # Determine event type based on name
        event_type = cls._determine_event_type(telemetry_data.get('name', ''))
        
        # Convert timestamp string to datetime
        timestamp = datetime.fromisoformat(
            telemetry_data.get('timestamp').replace('Z', '+00:00')
        )
        
        # Create event
        event = cls(
            agent_id=agent.agent_id,
            session_id=session_id,
            trace_id=trace_id,
            span_id=span_id,
            parent_span_id=telemetry_data.get('parent_span_id'),
            timestamp=timestamp,
            schema_version=telemetry_data.get('schema_version', '1.0'),
            name=telemetry_data.get('name', ''),
            level=telemetry_data.get('level', 'INFO'),
            event_type=event_type
        )
        
        db_session.add(event)
        
        # Create specialized event based on event type
        if event_type == 'llm':
            from src.models.llm_interaction import LLMInteraction
            LLMInteraction.from_event(db_session, event, telemetry_data)
        elif event_type == 'tool':
            from src.models.tool_interaction import ToolInteraction
            ToolInteraction.from_event(db_session, event, telemetry_data)
        elif event_type == 'security':
            from src.models.security_alert import SecurityAlert
            SecurityAlert.from_event(db_session, event, telemetry_data)
        elif event_type == 'framework':
            from src.models.framework_event import FrameworkEvent
            FrameworkEvent.from_event(db_session, event, telemetry_data)
        
        # Update related entity timestamps
        if trace:
            trace.update_timestamps(db_session, timestamp, timestamp)
        if span:
            span.update_timestamps(db_session, timestamp, timestamp)
        if session:
            session.update_end_timestamp(db_session, timestamp)
        
        return event
    
    @staticmethod
    def _determine_event_type(event_name: str) -> str:
        """
        Determine the event type based on the event name.
        
        Args:
            event_name: Name of the event
            
        Returns:
            str: Event type
        """
        if event_name.startswith('llm.'):
            return 'llm'
        elif event_name.startswith('tool.'):
            return 'tool'
        elif event_name.startswith('security.'):
            return 'security'
        elif event_name.startswith('framework.') or event_name == 'framework_patch':
            return 'framework'
        elif event_name.startswith('monitoring.'):
            return 'monitoring'
        else:
            return 'other' 